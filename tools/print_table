#!/usr/bin/env python

import os, sys
import matplotlib.pyplot as plt

def read_files(tar_dir, data, info, mode):
	for organ in os.listdir(tar_dir):
		if not os.path.isdir("%s/%s"%(tar_dir, organ)):
			continue
		organ_path = "%s/%s"%(tar_dir, organ)
		if mode == "sim":
			_, _, inv, _, _, _, _ = organ.split("_")
			organ = int(inv)
		for ref in os.listdir(organ_path):
			for method in os.listdir("%s/%s"%(organ_path, ref)):
				if method == "analysis.txt":
					continue
				if organ not in data:
					data[organ] = {}
					info[organ] = {}
				if ref not in data[organ]:
					data[organ][ref] = {}
					info[organ][ref] = {}
				if method not in data[organ][ref]:
					data[organ][ref][method] = {}
				# exec time
				with open("%s/%s/%s/time.txt"%(organ_path, ref, method)) as file:
					data[organ][ref][method]["time"] = float(file.readline())
				# prec
				with open("%s/%s/%s/evaulate.txt"%(organ_path, ref, method)) as file:
					lines = file.readlines()
					data[organ][ref][method] |= {
						"scaff": int(lines[0].split()[1]),
						"sens": float(lines[4].split()[1]),
						"prec": float(lines[5].split()[1]),
						"f_score": float(lines[6].split()[1])
					}
				# data analysis
				info_path = "%s/%s/analysis.txt"%(organ_path, ref)
				with open(info_path) as file:
					lines = file.readlines()
					info[organ][ref] |= {
						"marker": {
							"ref": int(lines[1].split()[1]),
							"tar": int(lines[1].split()[2])
						}, "contig": {
							"ref": int(lines[2].split()[1]),
							"tar": int(lines[2].split()[2])
						},
						"dup_rate":  float(lines[4].split()[1]),
						"dist_rate": float(lines[5].split()[1])
					}

def write_file(tar_dir, data, info, mode):
	with open("%s/result.txt"%tar_dir, "w") as file:
		item_list = ["sens", "prec", "f_score", "scaff", "time"]
		org_len = max([len(str(organ)) for organ in data])
		ref_len = max([len(ref) for organ in data for ref in data[organ]])
		# header
		file.write(" %*s | %*s |"%(org_len+ref_len+3, "", 6, ""))
		for item in item_list:
			file.write("%8s |"%item)
		file.write(" %*s marker | %*s contig |"%(10, "", 10, ""))
		file.write("     dup |    dist |")
		file.write("\n")
		# content
		for organ in sorted(data):
			for ref in sorted(data[organ]):
				# line start
				file.write("-%s-+-%s-+--------+"%("-"*org_len, "-"*ref_len))
				for item in item_list:
					file.write("---------+")
				for i in range(6):
					file.write("---------+")
				file.write("\n")
				# line end
				for method in sorted(data[organ][ref]):
					file.write(" %-*s | %-*s | %-6s |"%(org_len, organ, ref_len, ref, method))
					file.write(" %7.3f | %7.3f | %7.3f | %7d | %7.2f |"%
							tuple([data[organ][ref][method][item] for item in item_list]))
					target = info[organ][ref]
					file.write(" %7d | %7d |"%(target["marker"]["ref"], target["marker"]["tar"]))
					file.write(" %7d | %7d |"%(target["contig"]["ref"], target["contig"]["tar"]))
					file.write(" %7.3f | %7.3f |"%(target["dup_rate"], target["dist_rate"]))
					file.write("\n")

	with open("%s/better.txt"%tar_dir, "w") as file:
		for organ in info:
			for ref in info[organ]:
				target = data[organ][ref]
				if target["EBD"]["f_score"] < target["EDCJ"]["f_score"]:
					file.write("%10s %15s %7.3f %7.3f\n"%(organ, ref, target["EBD"]["f_score"], target["EDCJ"]["f_score"]))

	with open("%s/faster.txt"%tar_dir, "w") as file:
		for organ in info:
			for ref in info[organ]:
				target = data[organ][ref]
				if target["EBD"]["time"] > target["EDCJ"]["time"]:
					file.write("%10s %15s %7.3f %7.3f\n"%(organ, ref, target["EBD"]["time"], target["EDCJ"]["time"]))

def draw_plot(tar_dir, data, item):
	inv_list = sorted(data)
	sub_list = sorted(data[inv_list[0]])
	method_list = sorted(data[inv_list[0]][sub_list[0]])

	plt.figure()
	plt.title(tar_dir)
	plt.xticks(range(len(inv_list)), inv_list)
	plt.xlabel("Inversion (%)")
	item_label = {
		"scaff": "# of Scaffolds", 
		"time": "Time (sec)", 
		"sens": "Sensitivity", 
		"prec": "Precision", 
		"f_score": "F Score", 
	}
	plt.ylabel(item_label[item])
	if item not in ["time", "scaff"]:
		plt.ylim([0.5, 1])
	plt.grid(True)
	for method in method_list:
		plt.plot([sum([data[inv][sub][method][item] for sub in sub_list])/len(sub_list) for inv in inv_list])
	plt.legend(loc="best", labels=method_list)
	plt.savefig("%s/%s.png"%(tar_dir, item))

def draw_analysis_plot(plot_name, data, info):
	plt.figure()
	plt.title(plot_name[:-4])
	plt.xlabel("Distance Rate")
	plt.ylabel("Duplication Rate")
	#plt.xlim([0, 1])
	plt.ylim([1, 2])
	plt.grid(True)
	for organ in info:
		for ref in info[organ]:
			targetI = info[organ][ref]
			targetD = data[organ][ref]
			#plt.scatter(target["dist_rate"]/(target["marker"]["ref"]+target["marker"]["tar"]), target["dup_rate"])
			plt.scatter(targetI["dist_rate"], targetI["dup_rate"],
				color="red" if targetD["EBD"]["f_score"] < targetD["EDCJ"]["f_score"] else
				"purple" if targetD["EBD"]["time"] > targetD["EDCJ"]["time"] else "blue")
	temp = plt.legend(loc="best", labels=["better", "worse", "faster"])
	temp.legend_handles[0].set_color("red")
	temp.legend_handles[1].set_color("blue")
	temp.legend_handles[2].set_color("purple")
	plt.savefig(plot_name)


def main():
	if len(sys.argv) < 2:
		print("Usage: ./print_table <tar_dir>")

	info = {}
	data = {}
	tar_dir = sys.argv[1]

	mode = "sim" if os.listdir(tar_dir)[0][0:3] == "sim" else "real"

	read_files(tar_dir, data, info, mode)
	write_file(tar_dir, data, info, mode)
	# data check
	#import json
	#print(json.dumps(data, sort_keys=True, indent=4))
	if mode == "sim":
		for item in ["time", "scaff", "sens", "prec", "f_score"]:
			draw_plot(tar_dir, data, item)
	draw_analysis_plot("%s/analysis.png"%tar_dir, data, info)

if __name__ == "__main__":
	main()
